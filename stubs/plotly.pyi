from typing import Any, Dict, List, Optional

class Figure:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def add_trace(self, trace: Any) -> 'Figure': ...
    def add_annotation(self, **kwargs: Any) -> 'Figure': ...
    def update_layout(self, **kwargs: Any) -> 'Figure': ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_json(self) -> str: ...

class Scatter:
    def __init__(self, **kwargs: Any) -> None: ...

class Bar:
    def __init__(self, **kwargs: Any) -> None: ...

class Table:
    def __init__(self, **kwargs: Any) -> None: ...

def make_subplots(
    rows: int = 1,
    cols: int = 1,
    subplot_titles: Optional[List[str]] = None,
    specs: Optional[List[List[Dict[str, Any]]]] = None,
    **kwargs: Any
) -> Figure: ...

class express:
    def line(*args: Any, **kwargs: Any) -> Figure: ...
    def bar(*args: Any, **kwargs: Any) -> Figure: ...
    def scatter(*args: Any, **kwargs: Any) -> Figure: ...
    def histogram(*args: Any, **kwargs: Any) -> Figure: ...
    def box(*args: Any, **kwargs: Any) -> Figure: ...
    def violin(*args: Any, **kwargs: Any) -> Figure: ...
    def heatmap(*args: Any, **kwargs: Any) -> Figure: ...
    def contour(*args: Any, **kwargs: Any) -> Figure: ...
    def surface(*args: Any, **kwargs: Any) -> Figure: ...
    def scatter_3d(*args: Any, **kwargs: Any) -> Figure: ...
    def line_3d(*args: Any, **kwargs: Any) -> Figure: ...
    def surface_3d(*args: Any, **kwargs: Any) -> Figure: ... 