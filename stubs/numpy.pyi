from typing import Any

class ndarray:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def shape(self) -> tuple[Any, ...]: ...
    def size(self) -> int: ...
    def dtype(self) -> Any: ...
    def astype(self, dtype: Any) -> ndarray: ...
    def reshape(self, *args: Any) -> ndarray: ...
    def flatten(self) -> ndarray: ...
    def sum(self, axis: int | None = None) -> float | ndarray: ...
    def mean(self, axis: int | None = None) -> float | ndarray: ...
    def std(self, axis: int | None = None) -> float | ndarray: ...
    def max(self, axis: int | None = None) -> float | ndarray: ...
    def min(self, axis: int | None = None) -> float | ndarray: ...

def array(obj: Any, **kwargs: Any) -> ndarray: ...
def zeros(shape: int | tuple[Any, ...], **kwargs: Any) -> ndarray: ...
def ones(shape: int | tuple[Any, ...], **kwargs: Any) -> ndarray: ...
def random(shape: int | tuple[Any, ...], **kwargs: Any) -> ndarray: ...
def linspace(start: float, stop: float, num: int = 50) -> ndarray: ...
def arange(start: float, stop: float, step: float = 1.0) -> ndarray: ... 