from __future__ import annotations

# pyright: reportUnknownVariableType=false, reportUnknownMemberType=false, reportUnknownArgumentType=false, reportUnknownParameterType=false

import os
import sys
import pandas as pd
from datetime import datetime, timezone
import streamlit as st

# Ensure project root is importable so `dashboard` resolves
_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
if _ROOT not in sys.path:
    sys.path.append(_ROOT)

# Canonical components root: components.*
from streamlit.data_client import get_balances, get_trades, get_health_check, get_ai_heartbeat
from streamlit.state import get_app_state, render_sidebar_controls
from streamlit.ui_guard import display_guard


def main() -> None:
    st.set_page_config(page_title="Portfolio & Orders", layout="wide")
    # Unified sidebar controls bound to session state
    render_sidebar_controls()
    state = get_app_state()
    sym = str(state["symbol"])  # normalized dash

    # Top banner status pills
    try:
        hc = get_health_check()
        from typing import Any, Dict, List, cast
        hdata: Dict[str, Any] = cast(Dict[str, Any], hc.data) if isinstance(hc.data, dict) else {}  # type: ignore[assignment]
        adapters: List[str] = [str(x) for x in cast(List[Any], hdata.get("adapters", []))] if isinstance(hdata.get("adapters"), list) else []  # type: ignore[assignment]
        autobuy_state: str = str(hdata.get("autobuy", ""))
        sys_state: str = str(hdata.get("status", ""))
        status_map = {
            "CB": "✅" if "coinbase" in adapters else "⚠️",
            "BUS": "✅" if "binanceus" in adapters else "⚠️",
            "KRA": "✅" if "kraken" in adapters else "⚠️",
            "CGK": "✅" if "coingecko" in adapters else "⚠️",
            "AI": "✅" if autobuy_state == "ready" else ("⚠️" if autobuy_state else "❌"),
            "SYS": "✅" if sys_state == "ok" else ("⚠️" if sys_state else "❌"),
        }
        pills = " ".join([f"<span style='padding:4px 8px;border-radius:12px;background:#222;color:#eee;margin-right:6px'>{k} {v}</span>" for k, v in status_map.items()])
        st.markdown(pills, unsafe_allow_html=True)
        # AI status chip
        try:
            ai = get_ai_heartbeat()
            running = bool(ai.data.get("running")) if isinstance(ai.data, dict) else False
            last_ts = ai.data.get("last_decision_ts") if isinstance(ai.data, dict) else None
            st.markdown(
                f"<div style='margin:6px 0;padding:6px 10px;display:inline-block;border-radius:12px;background:{'#154' if running else '#441'};color:#eee'>AI: {'Running' if running else 'Idle'} • {last_ts or '—'}</div>",
                unsafe_allow_html=True,
            )
        except Exception:
            pass
        st.caption(f"Last refresh: {datetime.now(timezone.utc).strftime('%H:%M:%S UTC')}")
    except Exception:
        pass

    with display_guard("Balances"):
        bals = get_balances(str(state["exchange"]))
    data = []
    if isinstance(bals.data, list):
        for item in bals.data:
            if isinstance(item, dict):
                data.append(item)
    if data:
        try:
            df = pd.DataFrame(data)
            st.subheader("Balances")
            st.dataframe(df, use_container_width=True)  # type: ignore[call-overload]
        except Exception:
            st.json(data)
    else:
        st.info("Live: no data yet")

    with display_guard("Orders/Trades"):
        tr = get_trades(str(state["exchange"]), sym, 100)
    orders = []
    if isinstance(tr.data, list):
        for it in tr.data:
            if isinstance(it, dict):
                orders.append(it)
    st.subheader("Recent Orders/Trades")
    if orders:
        try:
            df2 = pd.DataFrame(orders)
            st.dataframe(df2.tail(100), use_container_width=True)  # type: ignore[call-overload]
        except Exception:
            st.json(orders)
    else:
        st.info("Live: no data yet")

    with st.expander("Debug"):
        payload_size_bal = len(str(bals.data)) if bals.data is not None else 0
        payload_size_tr = len(str(tr.data)) if tr.data is not None else 0
        st.write({
            "balances_latency_ms": bals.latency_ms,
            "trades_latency_ms": tr.latency_ms,
            "balances_payload_size": payload_size_bal,
            "trades_payload_size": payload_size_tr,
            "balances_cache_age_s": bals.cache_age_s,
            "trades_cache_age_s": tr.cache_age_s,
        })


if __name__ == "__main__":
    main()


