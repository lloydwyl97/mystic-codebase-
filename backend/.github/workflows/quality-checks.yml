name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install Node.js tools
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install jscpd and husky
      run: |
        npm install -g jscpd husky

    - name: Run Black (code formatting)
      run: |
        black --check --line-length=100 --target-version=py311 .

    - name: Run isort (import sorting)
      run: |
        isort --check-only --profile=black --line-length=100 .

    - name: Run Flake8 (linting)
      run: |
        flake8 --max-line-length=100 --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run Pylint (code analysis)
      run: |
        pylint --disable=C0114,C0115,C0116,R0903,R0913,R0914,R0915,W0621,W0703,W1201,W1202,W1203 --ignore=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run MyPy (type checking)
      run: |
        mypy --ignore-missing-imports --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run Bandit (security)
      run: |
        bandit -r . -f json -o bandit-report.json --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src

    - name: Run Safety (dependency security)
      run: |
        safety check --json --output safety-report.json

    - name: Run Radon (complexity)
      run: |
        radon cc . --json --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src
        radon mi . --json --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src

    - name: Run Lizard (complexity)
      run: |
        lizard --CCN 10 --length 1000 --arguments 100 --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run Vulture (dead code)
      run: |
        vulture --min-confidence=80 --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run jscpd (duplicate code)
      run: |
        jscpd --reporters=json --output=./jscpd-report.json --ignore=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Run Pytest (tests)
      run: |
        pytest --tb=short -v --strict-markers --strict-config --cov=. --cov-report=xml --cov-report=html

    - name: Run Coverage
      run: |
        coverage run -m pytest --source=. --omit=*/tests/*,*/venv/*,*/.venv/*,*/__pycache__/*,*/logs/*,*/backups/*,*/model_versions/*,*/mutated_strategies/*,*/strategy_backups/*,*/stubs/*,*/typings/*,*/redis-server/*,*/crypto_widget/*,*/frontend/*,*/src/*,*/build/*,*/dist/*,*.egg-info/*,setup.py,conftest.py
        coverage report --show-missing

    - name: Run Pydocstyle (documentation)
      run: |
        pydocstyle --convention=google --add-ignore=D100,D101,D102,D103,D104,D105,D106,D107 --exclude=venv,.venv,__pycache__,.pytest_cache,build,dist,*.egg-info,logs,backups,model_versions,mutated_strategies,strategy_backups,stubs,typings,redis-server,crypto_widget,frontend,src .

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          jscpd-report.json
          coverage.xml
          htmlcov/

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          let report = '## üîç Quality Check Results\n\n';
          report += '### ‚úÖ All quality checks passed!\n\n';

          // Add coverage info if available
          if (fs.existsSync('coverage.xml')) {
            const coverage = fs.readFileSync('coverage.xml', 'utf8');
            const match = coverage.match(/<coverage.*?line-rate="([^"]+)"/);
            if (match) {
              const percentage = Math.round(parseFloat(match[1]) * 100);
              report += `### üìä Code Coverage: ${percentage}%\n\n`;
            }
          }

          // Add security info if available
          if (fs.existsSync('bandit-report.json')) {
            const bandit = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = bandit.results?.length || 0;
            report += `### üîí Security Issues: ${issues}\n\n`;
          }

          report += '---\n';
          report += '*This report was generated automatically by the quality checks workflow.*';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
