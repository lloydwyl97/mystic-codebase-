/* eslint-env serviceworker */
/* global self, caches, clients */

// Comprehensive Service Worker for Mystic Trading Platform
const _CACHE_NAME = 'mystic-trading-v1.0.0';
const STATIC_CACHE = 'mystic-static-v1.0.0';
const DYNAMIC_CACHE = 'mystic-dynamic-v1.0.0';
const API_CACHE = 'mystic-api-v1.0.0';

// Files to cache immediately
const STATIC_FILES = [
  '/',
  '/index.html',
  '/manifest.json',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
  '/offline.html'
];

// API endpoints to cache
const _API_ENDPOINTS = [
  '/api/market-data',
  '/api/signals',
  '/api/portfolio',
  '/api/analytics',
  '/api/health'
];

// Install event - cache static files
self.addEventListener('install', event => {
  console.log('Service Worker: Installing...');

  event.waitUntil(
    caches
      .open(STATIC_CACHE)
      .then(cache => {
        console.log('Service Worker: Caching static files');
        return cache.addAll(STATIC_FILES);
      })
      .then(() => {
        console.log('Service Worker: Static files cached');
        return self.skipWaiting();
      })
      .catch(error => {
        console.error('Service Worker: Error caching static files:', error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  console.log('Service Worker: Activating...');

  event.waitUntil(
    caches
      .keys()
      .then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            if (
              cacheName !== STATIC_CACHE &&
              cacheName !== DYNAMIC_CACHE &&
              cacheName !== API_CACHE
            ) {
              console.log('Service Worker: Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log('Service Worker: Activated');
        return self.clients.claim();
      })
  );
});

// Fetch event - serve from cache or network
self.addEventListener('fetch', event => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Handle API requests
  if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request));
    return;
  }

  // Handle static files
  if (url.origin === self.location.origin) {
    event.respondWith(handleStaticRequest(request));
    return;
  }

  // Handle external requests (CDN, etc.)
  event.respondWith(handleExternalRequest(request));
});

// Handle API requests with cache-first strategy
async function handleApiRequest(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);

    if (networkResponse.ok) {
      // Cache the response
      const cache = await caches.open(API_CACHE);
      cache.put(request, networkResponse.clone());
      return networkResponse;
    }
  } catch (_error) {
    console.log('Service Worker: Network failed for API request:', request.url);
  }

  // Fallback to cache
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    console.log('Service Worker: Serving API from cache:', request.url);
    return cachedResponse;
  }

  // Return offline response for API requests
  return new Response(
    JSON.stringify({
      error: 'Offline',
      message: 'No cached data available',
      timestamp: new Date().toISOString()
    }),
    {
      status: 503,
      statusText: 'Service Unavailable',
      headers: { 'Content-Type': 'application/json' }
    }
  );
}

// Handle static files with cache-first strategy
async function handleStaticRequest(request) {
  const cachedResponse = await caches.match(request);

  if (cachedResponse) {
    console.log('Service Worker: Serving static file from cache:', request.url);
    return cachedResponse;
  }

  try {
    const networkResponse = await fetch(request);

    if (networkResponse.ok) {
      // Cache the response
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (_error) {
    console.log('Service Worker: Network failed for static request:', request.url);

    // Return offline page for navigation requests
    if (request.destination === 'document') {
      const offlineResponse = await caches.match('/offline.html');
      if (offlineResponse) {
        return offlineResponse;
      }
    }

    return new Response('Offline', { status: 503 });
  }
}

// Handle external requests
async function handleExternalRequest(request) {
  try {
    const networkResponse = await fetch(request);

    // Cache successful responses
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (_error) {
    console.log('Service Worker: Network failed for external request:', request.url);

    // Try cache as fallback
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    return new Response('Offline', { status: 503 });
  }
}

// Background sync for offline actions
self.addEventListener('sync', event => {
  console.log('Service Worker: Background sync triggered:', event.tag);

  if (event.tag === 'background-sync') {
    event.waitUntil(performBackgroundSync());
  }
});

// Perform background sync
async function performBackgroundSync() {
  try {
    // Sync pending trades
    await syncPendingTrades();

    // Sync market data
    await syncMarketData();

    // Sync user preferences
    await syncUserPreferences();

    console.log('Service Worker: Background sync completed');
  } catch (_error) {
    console.error('Service Worker: Background sync failed:', _error);
  }
}

// Sync pending trades
async function syncPendingTrades() {
  const pendingTrades = await getPendingTrades();

  for (const trade of pendingTrades) {
    try {
      const response = await fetch('/api/trades', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(trade)
      });

      if (response.ok) {
        await removePendingTrade(trade.id);
      }
    } catch (_error) {
      console.error('Service Worker: Failed to sync trade:', trade.id, _error);
    }
  }
}

// Sync market data
async function syncMarketData() {
  try {
    const response = await fetch('/api/market-data/sync', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    if (response.ok) {
      const cache = await caches.open(API_CACHE);
      await cache.put('/api/market-data', response.clone());
    }
  } catch (_error) {
    console.error('Service Worker: Failed to sync market data:', _error);
  }
}

// Sync user preferences
async function syncUserPreferences() {
  try {
    const preferences = await getStoredPreferences();

    if (preferences) {
      await fetch('/api/preferences', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(preferences)
      });
    }
  } catch (_error) {
    console.error('Service Worker: Failed to sync preferences:', _error);
  }
}

// Push notification handling
self.addEventListener('push', event => {
  console.log('Service Worker: Push notification received');

  const options = {
    body: event.data ? event.data.text() : 'New trading signal available!',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: 'View Signal',
        icon: '/icons/checkmark.png'
      },
      {
        action: 'close',
        title: 'Close',
        icon: '/icons/xmark.png'
      }
    ]
  };

  event.waitUntil(self.registration.showNotification('Mystic Trading', options));
});

// Notification click handling
self.addEventListener('notificationclick', event => {
  console.log('Service Worker: Notification clicked:', event.action);

  event.notification.close();

  if (event.action === 'explore') {
    event.waitUntil(clients.openWindow('/signals'));
  }
});

// Message handling for communication with main thread
self.addEventListener('message', event => {
  console.log('Service Worker: Message received:', event.data);

  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'CACHE_API_DATA') {
    event.waitUntil(cacheApiData(event.data.url, event.data.data));
  }

  if (event.data && event.data.type === 'GET_CACHED_DATA') {
    event.waitUntil(getCachedData(event.data.url, event.ports[0]));
  }
});

// Cache API data
async function cacheApiData(url, data) {
  try {
    const cache = await caches.open(API_CACHE);
    const response = new Response(JSON.stringify(data), {
      headers: { 'Content-Type': 'application/json' }
    });
    await cache.put(url, response);
    console.log('Service Worker: Cached API data for:', url);
  } catch (error) {
    console.error('Service Worker: Failed to cache API data:', error);
  }
}

// Get cached data
async function getCachedData(url, port) {
  try {
    const cache = await caches.open(API_CACHE);
    const response = await cache.match(url);

    if (response) {
      const data = await response.json();
      port.postMessage({ success: true, data });
    } else {
      port.postMessage({ success: false, error: 'No cached data' });
    }
  } catch (error) {
    port.postMessage({ success: false, error: error.message });
  }
}

// Utility functions for IndexedDB operations
async function getPendingTrades() {
  // This would interact with IndexedDB to get pending trades
  return [];
}

async function removePendingTrade(tradeId) {
  // This would remove a trade from IndexedDB
  console.log('Service Worker: Removed pending trade:', tradeId);
}

async function getStoredPreferences() {
  // This would get preferences from IndexedDB
  return null;
}

// Periodic background sync (if supported)
self.addEventListener('periodicsync', event => {
  console.log('Service Worker: Periodic sync triggered:', event.tag);

  if (event.tag === 'market-data-sync') {
    event.waitUntil(syncMarketData());
  }
});

// Error handling
self.addEventListener('error', event => {
  console.error('Service Worker: Error:', event.error);
});

self.addEventListener('unhandledrejection', event => {
  console.error('Service Worker: Unhandled rejection:', event.reason);
});

console.log('Service Worker: Loaded successfully');
